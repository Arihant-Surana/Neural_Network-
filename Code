import numpy as np
X=np.array(([0,0,1],[0,1,1],[1,0,1],[1,1,1]),float)
y=np.array(([0],[1],[1],[0]),float)
def sigmoid(t):
    return 1/(1+np.exp(-t))

def sigmoid_derivative(p):
    return p*(1-p)
class NeuralNetwork:
    def __init__(self, x,y):
        self.input=x
        self.weights1=np.random.rand(self.input.shape[1],4)
        self.weights2=np.random.rand(4,1)
        self.y=y
        self.output=np.zeros(y.shape)
    def feedforward(self):
        self.layer1=sigmoid(np.dot(self.input,self.weights1))
        self.layer2=sigmoid(np.dot(self.layer1,self.weights2))
        return self.layer2

    def backdrop(self):
        d_weights2=np.dot(self.layer1.T,2*(self.y-self.output)*sigmoid_derivative(self.output))
        d_weights1=np.dot(self.input.T,np.dot(2*(self.y-self.output)*sigmoid_derivative(self.output),self.weights1.T)*sigmoid_derivative(self.layer1))
    
        self.weights1+=d_weights1
        
        self.weights2+=d_weights2
        
    def train(self,X,y):
        self.output=self.feedforward()
        self.backdrop()
    
NN=NeuralNetwork(X,y)
for i in range(1500):
    if i% 100 == 0:
        print("for iteration # "+str(i) + "\n")
        print("Input:\n "+str(X))
        print("Actual Ouptput: \n" + str(y))
        print("Predicted Output :\n" + str(NN.feedforward()))
        print("Loss :\n"+ str(np.mean(np.square(y-NN.feedforward()))))
NN.train(X,y)

